var searchIndex = JSON.parse('{\
"tiralabra":{"doc":"","t":[0,0,17,5,3,12,12,12,12,12,12,11,11,11,11,11,11,11,0,3,12,12,12,12,11,11,11,11,0,3,12,12,11,11,11,0,6,17,17,3,12,12,11,11,11,11,0,8,3,12,12,12,12,3,12,3,12,3,12,12,12,5,11,11,11,11,11,11,11,0,5,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["correlation_match","parabolic_interpolation","EPS","get_minimum_point","CorrelationMatch","max_size","cross_correlation","f_buffer","g_buffer","result_buffer","minima","new","compute","zero_buffers","compute_a_squared_term","compute_cross_term","compute_b_squared_term","find_minimum_and_interval","cross_correlation","CrossCorrelation","base_size","fft_size","fft","buffer","new","compute","compute_truncated","compute_raw","fft","Prepared","size","twiddle_factors","new","fft","ifft","math","Num","PI","IMAG_UNIT","Complex","real","imag","conj","abs2","abs","euler","ring_buffer","Item","RingBuffer","capacity","buffer","read_index","write_index","Producer","internal","Consumer","internal","RingRange","start","open_end","capacity","with_capacity","produce_available","consume_available","commit_produced","commit_consumed","push","pop_full","discard_all","util","shift_left","IterWindows","source","array","from","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","next","size_hint","next","clone","fmt","div","div","sub","add","mul","mul","neg"],"q":["tiralabra","tiralabra::correlation_match","tiralabra::correlation_match::parabolic_interpolation","","tiralabra::correlation_match","","","","","","","","","","","","","","tiralabra","tiralabra::cross_correlation","","","","","","","","","tiralabra","tiralabra::fft","","","","","","tiralabra","tiralabra::math","","","","","","","","","","tiralabra","tiralabra::ring_buffer","","","","","","","","","","","","","","","","","","","","","","tiralabra","tiralabra::util","","","","","tiralabra::correlation_match","","","","","","","tiralabra::cross_correlation","","","","","","","tiralabra::fft","","","","","","","tiralabra::math","","","","","","","","","tiralabra::ring_buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tiralabra::util","","","","","","","","tiralabra::math","tiralabra::ring_buffer","","tiralabra::util","tiralabra::math","","","","","","","",""],"d":["Finds the closest match of a shorter piece of audio from …","Finds the approximate minimum point of a function given …","","Interpolate a function given three points, …","A structure prepared to perform correlation matches up to …","","","","","","","Allocate and prepare a correlation match algorithm. …","Compute how much <code>b</code> should be shifted (to the right) to …","","","","","","Computes cross correlation efficiently, using FFT.","A structure prepared to perform cross correlations up to …","","","","","Allocate and prepare a cross correlation. <code>max_size</code> is the …","Compute cross correlation including partially overlapping …","Compute cross correlation excluding partially overlapping …","Performs the computation without extracting results from …","Implements the FFT, i.e. Fast Fourier Transform, and its …","A structure that is initialized beforehand, and contains …","","","Prepare FFT. Size has to be a power of two.","Perform the transform. The size of the array has to be …","Perform the inverse transform. The size of the array has …","Defines mathematical structures and operations, primarily …","The primary type of real numbers. This may be switched to …","The pi constant. If necessary, can be defined by hand …","The imaginary unit “i”.","A complex number.","","","The complex conjugate.","Square of the absolute value.","Absolute value.","Euler’s formula, <code>e^(ix) = cos x + i sin x</code>.","Ring buffer for transferring audio data between threads …","Defines the interface that an item stored in the queue …","","","","","","The Producer party of a ring buffer. Can only push data …","","The Consumer party of a ring buffer. Can only pop data …","","","","","","Construct a ring buffer with a given capacity, and return …","","","","","Tries to push the contents of the given slice into the …","Tries to fill the entirety of the given <code>data</code> slice. If …","Discard all currently available data.","","Shift the contents of the given <code>array</code> left, i.e. towards …","Iterate over fixed size windows.","","","Construct an <code>IterWindows</code> from another iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,2,2,2,2,2,2,0,0,3,3,3,3,3,0,0,0,0,0,4,4,4,4,4,4,0,0,0,5,5,5,5,0,6,0,7,0,8,8,8,0,5,5,5,5,6,7,7,0,0,0,9,9,9,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,4,8,8,9,4,4,4,4,4,4,4,4,4],"f":[null,null,null,[[["num",6]],["option",4]],null,null,null,null,null,null,null,[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["usize",15]]],[[]],[[]],[[]],null,null,null,null,[[["usize",15]]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[],["num",6]],[[],["num",6]],[[["num",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[],["ringrange",3]],[[],["ringrange",3]],[[["usize",15]]],[[["usize",15]]],[[],[["result",4],["usize",15]]],[[],[["result",4],["usize",15]]],[[]],null,[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["complex",3]],[[],[["usize",15],["option",4]]],[[]],[[],["option",4]],[[],["complex",3]],[[["formatter",3]],["result",6]],[[["num",6]]],[[]],[[]],[[]],[[["num",6]]],[[]],[[]]],"p":[[3,"CorrelationMatch"],[3,"CrossCorrelation"],[3,"Prepared"],[3,"Complex"],[3,"RingBuffer"],[3,"Producer"],[3,"Consumer"],[3,"RingRange"],[3,"IterWindows"]]}\
}');
initSearch(searchIndex);