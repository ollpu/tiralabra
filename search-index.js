var searchIndex = JSON.parse('{\
"tiralabra":{"doc":"","t":[0,6,17,17,3,12,12,11,11,11,11,0,8,3,3,5,11,11,11,0,5,5,5,5,3,11,3,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["math","Num","PI","IMAG_UNIT","Complex","real","imag","conj","abs2","abs","euler","ring_buffer","Item","Producer","Consumer","with_capacity","push","pop_full","discard_all","util","shift_left","shift_right","shift_left_fill","shift_right_fill","IterWindows","from","DisplayBuffer","parabolic_interpolation_minimum","CorrelationMatch","CrossCorrelation","Fft","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","next","clone","fmt","div","div","sub","add","mul","mul","neg","new","scroll","get_buffer_mut","update_match","update_display","get_display","get_memory","get_period","get_offset","new","compute","new","compute","compute_truncated","new","fft","ifft"],"q":["tiralabra","tiralabra::math","","","","","","","","","","tiralabra","tiralabra::ring_buffer","","","","","","","tiralabra","tiralabra::util","","","","","","tiralabra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tiralabra::math","","","","","","","","","tiralabra::ring_buffer","","","","","","","","","","","","","","tiralabra::util","","","","","","","","tiralabra::math","tiralabra::util","tiralabra::math","","","","","","","","","tiralabra","","","","","","","","","","","","","","","",""],"d":["Defines mathematical structures and operations, primarily …","The primary type of real numbers. This may be switched to …","The pi constant. If necessary, can be defined by hand …","The imaginary unit “i”.","A complex number.","","","The complex conjugate.","Square of the absolute value.","Absolute value.","Euler’s formula, <code>e^(ix) = cos x + i sin x</code>.","Ring buffer for transferring audio data between threads …","Defines the interface that an item stored in the queue …","The Producer party of a ring buffer. Can only push data …","The Consumer party of a ring buffer. Can only pop data …","Construct a ring buffer with a given capacity, and return …","Tries to push the contents of the given slice into the …","Tries to fill the entirety of the given <code>data</code> slice. If …","Discard all currently available data.","Miscellaneous array utilities.","Shift the contents of the given <code>array</code> left, i.e. towards …","Similar to [<code>shift_left</code>], but in the opposite direction. …","Like [<code>shift_left</code>], but shifts by a given <code>amount</code> and fills …","Like [<code>shift_right</code>], but shifts by a given <code>amount</code> and …","Iterate over fixed size windows.","Construct an <code>IterWindows</code> from another iterator.","Stores a prepared [<code>CorrelationMatch</code>] and buffers for …","Finds the approximate minimum point of a function given …","Finds the closest match of a shorter piece of audio from …","Computes cross correlation efficiently, using FFT.","Implements the FFT, i.e. Fast Fourier Transform, and its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct a new [<code>DisplayBuffer</code>] with given input buffer …","Scroll all internal buffers by the given signed amount of …","Get a mutable reference to the input buffer. If it is …","Update the correlation match position, memory buffer and …","Update the display buffer based on the newest input data …","Retrieve the contents of the display buffer.","Retrieve the contents of the memory buffer. This is what …","Get current estimated period.","Get the current offset and residual.","Allocate and prepare a correlation match algorithm. …","Compute how much <code>b</code> should be shifted (to the right) to …","Allocate and prepare a cross correlation. <code>max_size</code> is the …","Compute cross correlation including partially overlapping …","Compute cross correlation excluding partially overlapping …","Prepare FFT. Size has to be a power of two.","Perform the transform. The size of the array has to be …","Perform the inverse transform. The size of the array has …"],"i":[0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,2,3,3,0,0,0,0,0,0,4,0,0,0,0,0,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,1,4,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5,6,6,7,7,7,8,8,8],"f":[null,null,null,null,null,null,null,[[]],[[],["num",6]],[[],["num",6]],[[["num",6]]],null,null,null,null,[[["usize",15]]],[[],[["result",4],["usize",15]]],[[],[["result",4],["usize",15]]],[[]],null,[[]],[[]],[[["usize",15],["copy",8]]],[[["usize",15],["copy",8]]],null,[[]],null,[[["num",6]],["option",4]],null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["complex",3]],[[],["option",4]],[[],["complex",3]],[[["formatter",3]],["result",6]],[[["num",6]]],[[]],[[]],[[]],[[["num",6]]],[[]],[[]],[[["usize",15]]],[[["i32",15]]],[[]],[[["bool",15],["num",6]]],[[["num",6]]],[[]],[[]],[[],["num",6]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[]],[[]]],"p":[[3,"Complex"],[3,"Producer"],[3,"Consumer"],[3,"IterWindows"],[3,"DisplayBuffer"],[3,"CorrelationMatch"],[3,"CrossCorrelation"],[3,"Fft"]]}\
}');
initSearch(searchIndex);